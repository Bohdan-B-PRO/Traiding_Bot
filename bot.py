import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
import ccxt.async_support as ccxt
from dotenv import load_dotenv
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.storage import BaseStorage, FSMContext
import matplotlib.pyplot as plt
import io


def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False



class SimpleDictStorage(BaseStorage):

    def __init__(self):
        self.data = {}

    async def close(self):
        self.data.clear()

    async def wait_closed(self):
        pass

    async def get_data(self, chat=None, user=None, default=None):
        key = self.get_key(chat, user)
        return self.data.get(key, default)

    async def set_data(self, data, chat=None, user=None):
        key = self.get_key(chat, user)
        self.data[key] = data

    async def reset_data(self, chat=None, user=None):
        key = self.get_key(chat, user)
        if key in self.data:
            del self.data[key]

    async def get_state(self, chat=None, user=None, default=None):
        data = await self.get_data(chat, user, default)
        if data:
            return data.get('state', default)
        return default

    async def set_state(self, state, chat=None, user=None):
        key = self.get_key(chat, user)
        if key not in self.data:
            self.data[key] = {}
        self.data[key]['state'] = state

    async def update_data(self, data, chat=None, user=None):
        key = self.get_key(chat, user)
        if key in self.data:
            self.data[key].update(data)
        else:
            self.data[key] = data

    def get_key(self, chat, user):
        return f"{chat}:{user}"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')
ALLOWED_USER_ID = int(os.getenv('ALLOWED_USER_ID'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MemoryStorage
storage = SimpleDictStorage()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MemoryStorage
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
dp.middleware.setup(LoggingMiddleware())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ Binance
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_API_SECRET,
    'enableRateLimit': True
})

user_alerts_status = {}


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é
menu = InlineKeyboardMarkup(row_width=2)
menu.add(InlineKeyboardButton("Balance", callback_data="menu_balance"))
menu.add(InlineKeyboardButton("Price", callback_data="menu_price"))
menu.add(InlineKeyboardButton("Trade History", callback_data="menu_tradehistory"))
menu.add(InlineKeyboardButton("Clear", callback_data="menu_clear"))
menu.add(InlineKeyboardButton("Set Price Alert", callback_data="set_price_alert"))  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
menu.add(InlineKeyboardButton("Activate Alerts", callback_data="activate_alerts"))
menu.add(InlineKeyboardButton("Deactivate Alerts", callback_data="deactivate_alerts"))

admin_id = 379834541  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

async def on_startup(dp):
    await bot.send_message(admin_id, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.create_task(check_price_alerts())
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await start_command(types.Message(chat=types.Chat(id=admin_id), from_user=types.User(id=admin_id)))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async def show_menu_after_request(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:", reply_markup=menu)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è Binance.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await message.answer(greeting, reply_markup=menu)


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = (
        "/balance - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ Binance.\n"
        "/price - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC.\n"
        "/tradehistory - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö —Ç–æ—Ä–≥–æ–≤.\n"
        "/clear - '–û—á–∏—Å—Ç–∏—Ç—å' —á–∞—Ç.\n"
        "/setpricealert - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ.\n"
        "/activatealerts - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "/deactivatealerts - –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é:"
    )
    await message.answer(help_text, reply_markup=menu)


@dp.callback_query_handler(lambda c: c.data == 'menu_clear')
async def clear_chat(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω.")
    await show_menu_after_request(callback_query.message)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'menu_balance')
async def get_balance(callback_query: types.CallbackQuery):
    try:
        # –¢–∏–ø—ã –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ Binance
        wallet_types = ['spot', 'margin', 'futures']

        async def fetch_wallet_balance(wallet_type):
            balance = await exchange.fetch_balance({'type': wallet_type})
            usdt_balance = balance['total'].get('USDT', 0)
            traded_coins = {coin: amount for coin, amount in balance['total'].items() if coin != 'USDT' and amount > 0}
            response = [f"\nüîπ –ö–æ—à–µ–ª–µ–∫ {wallet_type.capitalize()} üîπ", f"–ë–∞–ª–∞–Ω—Å: {usdt_balance:.2f} USDT"]
            if traded_coins:
                for coin, amount in traded_coins.items():
                    ticker = await exchange.fetch_ticker(f'{coin}/USDT')
                    coin_value_usdt = ticker['last'] * amount
                    percentage = (coin_value_usdt / (coin_value_usdt + usdt_balance)) * 100
                    response.append(f"–¢–æ—Ä–≥—É–µ—Ç—Å—è {coin_value_usdt:.2f} USDT –≤ {coin} ({percentage:.2f}%)")
            else:
                response.append("–ù–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –¥–µ–ø–æ–∑–∏—Ç–æ–º –¥–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.")
            return response

        responses = await asyncio.gather(*(fetch_wallet_balance(wallet) for wallet in wallet_types))

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        all_responses = ["–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:"]
        for response in responses:
            all_responses.extend(response)

        await callback_query.message.answer("\n".join(all_responses))
        await show_menu_after_request(callback_query.message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
    await callback_query.answer()


class PriceQuery(StatesGroup):
    input_coin = State()

async def get_listed_coins():
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API, –Ω–∞–ø—Ä–∏–º–µ—Ä, CoinMarketCap –∏–ª–∏ Binance, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    return ["BTC", "ETH", "BNB", "ADA", "DOGE", "XRP", "DOT", "UNI", "BCH", "LTC", "LINK", "MATIC", "XLM", "ETC", "THETA", "VET", "TRX", "FIL", "XMR", "EOS"]

@dp.callback_query_handler(lambda c: c.data == 'menu_price')
async def menu_price_handler(callback_query: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ menu_price_handler –≤—ã–∑–≤–∞–Ω.")
    coins = await get_listed_coins()
    markup = InlineKeyboardMarkup(row_width=4)
    for coin in coins:
        button = InlineKeyboardButton(coin, callback_data=f"price_{coin}")
        markup.add(button)
    markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="input_manually"))
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'input_manually', state=None)
async def ask_for_coin(callback_query: types.CallbackQuery):
    await PriceQuery.input_coin.set()
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã:")
    await callback_query.answer()

@dp.message_handler(state=PriceQuery.input_coin)
async def get_price_for_input(message: types.Message, state: FSMContext):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ get_price_for_input –≤—ã–∑–≤–∞–Ω.")
    coin = message.text.upper()
    coins = await get_listed_coins()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç
    if coin not in coins:
        await message.answer(f"–ú–æ–Ω–µ—Ç–∞ {coin} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–Ω–µ—Ç—É.")
        return
    try:
        ticker = await exchange.fetch_ticker(f'{coin}/USDT')
        await message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {coin} —Ä–∞–≤–Ω–∞ {ticker['last']} USDT")

        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{coin}"))
        markup.add(InlineKeyboardButton("1 —á–∞—Å", callback_data=f"interval_1h_{coin}"))
        markup.add(InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"interval_1d_{coin}"))
        markup.add(InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data=f"interval_1w_{coin}"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {coin}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.finish()



# @dp.callback_query_handler(lambda c: c.data.startswith('price_'))
# async def show_coin_price(callback_query: types.CallbackQuery):
#     coin = callback_query.data.split('_')[1]
#     try:
#         ticker = await exchange.fetch_ticker(f'{coin}/USDT')
#         await callback_query.message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {coin} —Ä–∞–≤–Ω–∞ {ticker['last']} USDT")
#         await show_menu_after_request(callback_query.message)
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
#         await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {coin}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#     await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('price_'))
async def show_coin_price(callback_query: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ show_coin_price –≤—ã–∑–≤–∞–Ω.")
    coin = callback_query.data.split('_')[1]
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{coin}"))
    markup.add(InlineKeyboardButton("1 —á–∞—Å", callback_data=f"interval_1h_{coin}"))
    markup.add(InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"interval_1d_{coin}"))
    markup.add(InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data=f"interval_1w_{coin}"))
    # ... –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é ...
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=markup)
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('interval_'))
async def show_chart(callback_query: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ show_chart –≤—ã–∑–≤–∞–Ω.")
    interval, coin = callback_query.data.split('_')[1:3]

    try:
        # –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        ohlc_data = await exchange.fetch_ohlcv(f'{coin}/USDT', interval)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ {coin} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}.")

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–∫—Ä—ã—Ç–∏—è, –º–∞–∫—Å–∏–º—É–º–∞, –º–∏–Ω–∏–º—É–º–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        times = [x[0] for x in ohlc_data]
        opens = [x[1] for x in ohlc_data]
        highs = [x[2] for x in ohlc_data]
        lows = [x[3] for x in ohlc_data]
        closes = [x[4] for x in ohlc_data]

        # –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 5))
        plt.plot(times, closes, label=f'{coin} price')
        plt.title(f'Price of {coin} for the last {interval}')
        plt.xlabel('Time')
        plt.ylabel('Price')
        plt.legend()

        # –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
        last_price = closes[-1]
        plt.annotate(f'Current price: {last_price}', xy=(times[-1], last_price),
                     xytext=(times[-1] - 0.5, last_price + 0.5),
                     arrowprops=dict(facecolor='black', arrowstyle='->'),
                     horizontalalignment='right')

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        await callback_query.message.answer_photo(buf,
                                                  caption=f'Price chart for {coin} ({interval}). Current price: {last_price} USDT')
        buf.close()

        # –ó–∞–∫—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å
        plt.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {coin} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval}: {e}")
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {coin}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –ø–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–Ω–æ–≤–∞
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{coin}"))
    markup.add(InlineKeyboardButton("1 —á–∞—Å", callback_data=f"interval_1h_{coin}"))
    markup.add(InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"interval_1d_{coin}"))
    markup.add(InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data=f"interval_1w_{coin}"))
    # ... –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é ...

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=markup)
    await callback_query.answer()
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=menu)
    await callback_query.answer()



@dp.callback_query_handler(lambda c: c.data.startswith('chart_'))
async def handle_chart_request(callback_query: types.CallbackQuery):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_chart_request –≤—ã–∑–≤–∞–Ω.")
    coin = callback_query.data.split('_')[1]

    try:
        # –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        ohlc_data = await exchange.fetch_ohlcv(f'{coin}/USDT', '1d')  # –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ 1 –¥–µ–Ω—å
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ {coin} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1d.")

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç–∫—Ä—ã—Ç–∏—è, –º–∞–∫—Å–∏–º—É–º–∞, –º–∏–Ω–∏–º—É–º–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        times = [x[0] for x in ohlc_data]
        closes = [x[4] for x in ohlc_data]

        # –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 5))
        plt.plot(times, closes, label=f'{coin} price')
        plt.title(f'Price of {coin} for the last day')
        plt.xlabel('Time')
        plt.ylabel('Price')
        plt.legend()

        # –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
        last_price = closes[-1]
        plt.annotate(f'Current price: {last_price}', xy=(times[-1], last_price),
                     xytext=(times[-1] - 0.5, last_price + 0.5),
                     arrowprops=dict(facecolor='black', arrowstyle='->'),
                     horizontalalignment='right')

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        await callback_query.message.answer_photo(buf,
                                                  caption=f'Price chart for {coin} (1d). Current price: {last_price} USDT')
        buf.close()

        # –ó–∞–∫—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å
        plt.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {coin} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1d: {e}")
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {coin}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –ø–æ–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–Ω–æ–≤–∞
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data=f"chart_{coin}"))
    markup.add(InlineKeyboardButton("1 —á–∞—Å", callback_data=f"interval_1h_{coin}"))
    markup.add(InlineKeyboardButton("1 –¥–µ–Ω—å", callback_data=f"interval_1d_{coin}"))
    markup.add(InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data=f"interval_1w_{coin}"))
    # ... –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é ...

    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=markup)
    await callback_query.answer()
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=menu)
    await callback_query.answer()






@dp.callback_query_handler(lambda c: c.data == 'menu_tradehistory')
async def menu_tradehistory_handler(callback_query: types.CallbackQuery):
    try:
        trades = await exchange.fetch_my_trades('BTC/USDT', limit=5)  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
        trade_messages = [f"–°–¥–µ–ª–∫–∞ {trade['id']}: {trade['amount']} BTC –ø–æ —Ü–µ–Ω–µ {trade['price']} USDT" for trade in trades]
        await callback_query.message.answer("\n".join(trade_messages))
        await show_menu_after_request(callback_query.message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤: {e}")
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤.")
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=menu)
    await callback_query.answer()


class PriceAlert(StatesGroup):
    setting_coins = State()
    setting_prices = State()

@dp.callback_query_handler(lambda c: c.data == 'set_price_alert')
async def set_price_alert_callback(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC,ETH,ADA):")
    await PriceAlert.setting_coins.set()
    await callback_query.answer()


@dp.message_handler(commands=['setpricealert'])
async def set_price_alert_command(message: types.Message):
    markup = InlineKeyboardMarkup().add(cancel_button)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–Ω–µ—Ç—ã, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC,ETH,ADA):",
        reply_markup=markup)


@dp.message_handler(state=PriceAlert.setting_coins)
async def set_alert_coins(message: types.Message, state: FSMContext):
    coins = [coin.strip().upper() for coin in message.text.split(",")]
    await state.update_data({"coins": coins})  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è {', '.join(coins)} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50000,3000,2):")
    await PriceAlert.next()


@dp.message_handler(state=PriceAlert.setting_prices)
async def set_price_alerts(message: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup().add(cancel_button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    user_data = await state.get_data()
    coins = user_data.get("coins")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not all(is_number(price.strip()) for price in message.text.split(",")):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ü–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=markup)
        return

    prices = [float(price.strip()) for price in message.text.split(",")]

    if len(prices) != len(coins):
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏ —Ü–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=markup)
        return

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ —Ü–µ–Ω—ã –∏ –º–æ–Ω–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥—Ä—É–≥–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä: save_alerts_to_db(user_id=message.from_user.id, alerts=dict(zip(coins, prices)))

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(InlineKeyboardButton("Activate Alerts", callback_data="activate_alerts"))
    markup.add(InlineKeyboardButton("Deactivate Alerts", callback_data="deactivate_alerts"))
    markup.add(cancel_button)

    await message.answer(
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è: {', '.join([f'{coin} - {price} USDT' for coin, price in zip(coins, prices)])}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    await state.finish()



@dp.callback_query_handler(lambda c: c.data == "cancel_action", state='*')
async def cancel_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=menu)
    await callback_query.answer()



@dp.message_handler(lambda message: message.text.lower() == '–æ—Ç–º–µ–Ω–∞', state='*')
async def cancel_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        logging.info(f'Cancelling state {current_state}')
        await state.finish()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    else:
        await message.answer('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.')


@dp.callback_query_handler(lambda c: c.data == 'activate_alerts')
async def activate_alerts(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_alerts_status[user_id] = True
    await callback_query.message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=menu)
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'deactivate_alerts')
async def deactivate_alerts(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_alerts_status[user_id] = False
    await callback_query.message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=menu)
    await callback_query.answer()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# –ö–ª—é—á - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –º–æ–Ω–µ—Ç–æ–π –∏ –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ü–µ–Ω–æ–π
alerts = {}

async def check_price_alerts():
    while True:
        for user_id, user_alerts in alerts.items():
            for alert in user_alerts:
                coin = alert['coin']
                threshold_price = alert['price']

                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã
                    ticker = await exchange.fetch_ticker(f'{coin}/USDT')
                    current_price = ticker['last']

                    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ø–æ—Ä–æ–≥
                    if current_price >= threshold_price:
                        await bot.send_message(user_id, f"–¶–µ–Ω–∞ {coin} –¥–æ—Å—Ç–∏–≥–ª–∞ {current_price} USDT!")
                        user_alerts.remove(alert)  # –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã –¥–ª—è {coin}: {e}")

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç



if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
